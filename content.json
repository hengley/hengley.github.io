{"pages":[{"title":"","text":"title: Page not foundmeta: falseactions: falsecomments: false","link":"/404/index.html"},{"title":"Who am I","text":"主要研究方向为脑机接口、深度学习。我的博客主要记录我在学习过程中的心得体会，如有雷同，纯属借鉴，欢迎感兴趣的小伙伴和我一起学习。","link":"/about/index.html"},{"title":"all-archives","text":"","link":"/all-archives/index.html"},{"title":"all-tags","text":"","link":"/all-tags/index.html"},{"title":"all-categories","text":"","link":"/all-categories/index.html"},{"title":"search","text":"","link":"/search/index.html"}],"posts":[{"title":"Ubuntu报错信息","text":"一、软件中心打不开解决办法给Ubuntu 16.04升级安装了一些软件，然后遇到一个的问题，自从更新Ubuntu后就发现软件中心一打开就闪退或者奔溃，也不能再用来安装升级其他应用了，现在经测试运行以下命令可以修复。 依次运行下面的命令： 123sudo apt-get updatesudo apt-get dist-upgradesudo apt-get install --reinstall software-center 重装Ubuntu 16.04软件中心，简单直接。这里需要注意一下dist-upgrade和upgrade的区别。 dist-upgrade会比较灵活地处理包的依赖关系，而upgrade则不会，如果依赖包出了问题，upgrade会停止更新。 二、卸载python同时删除其依赖，系统出现问题解决办法如果终端还可以打开：卸载完成直接输入： 1sudo apt-get install ubuntu-desktop 然后重启问题解决。其他解决方法：用apt-get remove python命令卸载后出现的坑，你填得上么？","link":"/2019/08/01/Ubuntu%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF/"},{"title":"CSP二分类","text":"什么是CSP共空间模式(common spatial pattern,CSP)是脑-机接口领域常用的一类空间滤波算法，尤其在运动想象范式分类上具有较好的效果，是运动想象范式的基准算法之一。目前，CSP及其改进算法的发展速度放缓，看似到达了算法的瓶颈期，近几年没有什么较大的突破。尽管如此，CSP中的一些数学思想对传统脑-机接口算法仍然具有较大的影响力，例如近年运用在SSVEP上的TRCA、DCPM等算法均和CSP有着异曲同工之妙。因此，本文从CSP原始算法出发，讨论其变形和一系列改进算法，试图为读者阐明其中的数学思想。 CSP的原始形式假设我们做脑电实验，采集到两类不同的任务信号，用矩阵形式可以表示为$E^{(i)}_1 \\in R^{N_c \\times S}$和$E^{(i)}_2 \\in R^{N_c \\times S}$，其中$N_c$表示脑电导联数目，$S$表示采样点的个数，而上标$(i)$表示试次的序号（脑电实验通常会对一种任务进行多次实验，得到很多试次的数据），原始CSP算法采用以下步骤： 第一步，对数据做decenter处理，即减去每一导联在样本点上的均值第二步，求每一试次的协方差矩阵并归一化，最后得到平均的协方差矩阵这里的函数$trace()$是求矩阵的迹，即主对角线上的元素之和。注意到对于去均值的矩阵$E$，其协方差矩阵可以表示为$C = \\frac{1}{S-1} EE^{T}$，上式中没有$S-1$出现是因为上下相除互相抵消。$\\bar{C}_1$和$\\bar{C}_2$则是两类任务信号的平均协方差矩阵。 为什么要使用$trace()$来对协方差矩阵归一化？ 1990年Koles的文章中指出，归一化的目的是为了消除”被试间脑电信号幅值的变化”，注意到Koles的原意是区分健康人群和精神疾病人群，而个体的脑电幅值是有绝对性的差异的。方差可以表征信号在时域上的能量高低，不同人群的协方差矩阵的绝对值不同。为了消除这种差异带来的影响，利用$trace()$函数求得所有导联的总体能量，并对协方差矩阵归一化，从而安排除不同个体带来的干扰。Graz小组对同一个体不同试次的数据沿用了这种归一化方式，试图消除试次间的差异，发现也有一定的作用，这种归一化方式就一直流传下来。 然而，有些分析显示这种归一化方式反而会削弱信号的可分性，建议不要使用归一化。关于这一点，我会在以后进行讨论。 第三步， 构建复合协方差矩阵，并特征值分解，构建白化（whitening）矩阵其中$V_c$是特征向量矩阵（每一列是特征向量），$D_c$是由特征值组成的对角矩阵。$P$是白化矩阵，其目的是把对角矩阵$D_c$变化为单位矩阵$I$,即$PC_cP^{T} = I$成立。 第四步，计算空间滤波器$W$其中矩阵$S_1$和$S_2$具有同样的特征向量$V$（这也是共空间模式名称的由来），而相对应的特征值相加始终为1，即$D_1 + D_2 = I$。 为什么$S_1$和$S_2$具有同样的特征向量和此消彼长的特征值关系？这一点可以简单的证明如下假设$v_j$和$\\lambda_j^{(1)}$分别是$S_1$的特征向量和特征值，即 注意到$S_1+S_2=I$，把上式中的$S_1$置换掉可得 把上式变形一下可得 显然$v_j$也是$S_2$的特征向量，只不过其特征值为$1-\\lambda_j^{(1)}$ 这里还有一点需要注意，我们假设$S_1$特征值的顺序是按降序排列的（那么$S_2$的特征值就是按升序排列），即 这种排序的主要目的是为了以后分析的便利性，例如在运动想象分类中提取最有效的空间滤波器。 协方差矩阵是半正定矩阵（positive semidefinite），而半正定矩阵的特征值均为非负。故$S_1$和$S_2$的特征值在0~1之间 以上就是原始CSP算法的基本内容，在得到空间滤波器矩阵$W$后（$W$的每一列都是一个空间滤波器），就可以对信号进行变换$Z=W^TE$，而$Z$的每一行则代表了滤波后的一个时序特征信号，接下来便可以对$Z$做进一步的分析。 简单回顾一下CSP算法，不难发现CSP实质求解的是这样一个问题，寻找正交矩阵$W$使得以下条件成立： 让我们对以上的公式做一些变换，把第一个和第二个公式相加 又因为$W$是正交矩阵，故$W^T=W^{-1}$，从而 把上式代入$\\bar{C}_1W=WD_1$，可得 这个式子是不是看起来很像特征向量定义的公式$\\bar{C}_1W=WD_1$呢？只不过等式右边多了一个矩阵$\\bar{C}_1+\\bar{C}_2$。 这类形式的问题叫广义特征值问题，求解广义特征值问题是脑-机接口领域传统空间滤波方法的基础，大量的算法（CSP、TRCA等）都可以转化为这一形式。 CSP的第二种表述在讨论CSP的第二种表述之前，我们需要了解一个数学概念广义雷利商（generalized Rayleigh quotient）。广义雷利商长这样其中$A$和$B$为半正定矩阵（读者可以简单理解为协方差矩阵），$w$是列向量，显然广义雷利商$R$是一个实数。如果我们求如下广义雷利商的优化问题，就会有一些有趣的结果寻找$w$使得$R$最大，在数学上可以等价为求解下式（我就不证明了，感兴趣的读者可点击广义雷利商的链接查看证明过程）这个公式就是上一节提到的广义特征值问题，也就是说，寻找$w$使广义雷利商最大可以等价为求解$A$和$B$的广义特征值问题并找到使特征值$\\lambda_1$最大所对应的特征向量$w$。如果我们继续寻找能够使$R$第二大、第三大的$w$，就会发现只要解出广义特征值问题的矩阵形式即可其中$\\lambda_1 \\ge \\lambda_2 \\ge \\dots \\ge \\lambda_N$, 特征值的数值也就是广义雷利商的数值。如果读者明白广义雷利商和广义特征值问题之间的关联，就不难发现，上一节中推导的CSP求解问题可以变形为求解广义雷利商问题这里$A=\\bar{C}_1$、$B=\\bar{C}_1+\\bar{C}_2$，$W$矩阵是广义雷利商第一大、第二大至第N大向量$w$组成的集合。 CSP的第三种表述CSP的第三种表述形式需要绕点弯路。首先还是从CSP的原始形式出发，即寻找正交矩阵$W$使得以下条件成立： 在第二个公式的左右两边同时右乘矩阵$W^{-1}\\bar{C}_2^{-1}$，可以得到 把该式代入$W^T\\bar{C}_1W= D_1$，替换掉$W^T$，可得 上式左右两边左乘$\\bar{C}_2WD_2^{-1}$，可得 没错，我们又推出了熟悉的广义特征值问题$\\bar{C}_1W=\\bar{C}_2W\\Lambda$，再考虑广义雷利商与之的联系，可以得到CSP的第三种表述 相比CSP的原始形式和第二种表述形式，第三种表述形式更适合从直观上解释CSP在运动想象上有效的原因。运动想象会产生事件相关同步（ERS）和事件相关去同步（ERD）的现象，简单来说就是从电信号上看，某些脑区能量升高，某些脑区能量降低，故能量变化才是运动想象分类的关键特征。 我们前面提高过，方差可以看作一导信号能量的高低（协方差矩阵则是多导信号的能量反应），因此CSP的第三种表述形式实质体现这样一个问题：寻找一种变换方式$w$，使得变换后任务1的能量（$w^T\\bar{C}_1w$）和任务2的能量（$w^T\\bar{C}_2w$）差异最大化（其比值最大）。 CSP的这种特性恰好和运动想象的现象一致，CSP对能量特征做转换，强化了不同任务间能量差异。 关于CSP的第三种表述，最后还需要注意的一点是其同CSP原始形式和第二种表述形式并不完全等价，我们在推导第三种表述形式过程种始终没有用到这样一个约束条件$D_1 + D_2 = I$。 这表明，第三种形式是CSP的一种泛化形式，其和CSP原始形式和第二种表述的差异仅在于特征值$\\Lambda$不要求在0~1的范围内，具体来说，它们的特征值间存在这样一种关系","link":"/2019/07/19/CSP%E4%BA%8C%E5%88%86%E7%B1%BB/"},{"title":"Windows环境下搭建自己的github博客","text":"1、安装Git下载Windows下的Git客户端并安装，安装很简单，基本一路Next下去。 2、安装Node.js下载Node.js，安装Node.js也是一路Next下去。 3、安装npm打开Git Bash，执行下面的命令 1git clone --recursive git://github.com/isaacs/npm.git 然后执行下面命令进入npm目录并安装 12cd npmnode cli.js install npm -gf 在 cmd 中使用 npm，但是会发现在 git bash 中找不到 npm 的命令打开node的安装目录发现是由npm这个命令的，那说明没有加到bash的path中去如果没有发现npm，则需要自己添加，如下 123#pwd check npm pathnano ~/.bash_profileecho PATH=$PATH /c/Program Files/nodejs/npm/ 重新启动下 Git Bash 4、安装Hexo打开Git Bash，可以先测试一下Node.js是否安装成功，直接输入node可以看到提示符变成了一个向右的箭头就表示成功了，然后按ctrl + c退出node模式，出现$符号才表示正常了输入以下命令 1$ npm install -g hexo-cli 安装成功后，可以输入以下命令测试以下Hexo是否安装成功 1$ hexo -v 进入到刚刚创建的文件夹，打开Git Bash然后依次输入以下命令 1234$ hexo init$ npm install$ hexo g$ hexo s 5、Github配置登陆过后点击new repository，Repository name填写自己的名称 + .github.io， 例如（test.github.io，test就是你的github账号的名称）然后直接点Create repository就可以了 6、配置Github SSH密钥7、创建本地仓库与Github同步8、打开博客根目录下的_config.yml文件，这是博客的配置文件，修改与博客相关的各种信息。修改最后一行的配置：在：的后面是有一个空格的 1234deploy: type: git repository: https://github.com/zh-xust/zh-xust.github.io branch: master 保存后，然后在当前文件夹打开Git Bash Here 12$ hexo g$ hexo d 如果出现以下异常 1ERROR Deployer not found: git 尝试输入以下命令，然后重新执行刚刚的两条命令 1$ npm install hexo-deployer-git --save 这时候如果弹出一个对话框，输入在github上面的用户名和密码即可这时候我们就可以在浏览器输入https://zh-xust.github.io/（yourname替换成github上的名称）就可以看到博客已经搭建成功了","link":"/2019/07/15/Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84github%E5%8D%9A%E5%AE%A2/"},{"title":"Win系统中使用Mingw64编译Boost","text":"一、安装64位MinGW最新版本的64位MinGW。安装时，基本可以一路Next，但一定注意架构设置项一定要选“x86_64”，默认选项是“i686”。 安装完毕后，将’D:\\Program Files\\mingw64\\bin’(安装目录）添加当前用户的“Path”变量中，以便可以在命令行中随时使用gcc编译器。点击开始菜单图标，输入“cmd”，打开命令行窗口，输入“gcc -v”命令，如果正常，应显示如下信息： 二 编译Boost下载最新版本的Boost源代码，解压到合适的文件夹，打开命令行窗口，分别如下命令： 123cd /D d:\\code\\boost_1_66_0bootstrap gccb2 -j8 --build-dir=.\\tmp --build-type=complete threading=multi link=shared address-model=64 toolset=gcc stage 第一条命令表示切换到Boost库代码根路径；第二行代码表示使用“gcc”工具集（即我们安装的64位Mingw）生成编译工具“b2”；第三行代码表示，同时使用8个子线程编译构建Boost库（我的CPU为8核，故使用8，其他机器根据需要选取不同的线程数目），编译产生的临时文件放置于“d:\\code\\boost_1_66_0\\tmp”文件夹（编译完成后可直接删除），编译类型为“complete ”（同时Debug和Release版本），线程方式使用“multi ”（多线程），链接方式使用“shared”（即构建动态库），地址模型使用64位（即生成的库均为64位库），工具集使用“gcc”，“stage”表示生成的Boost库文件会存储于“d:\\code\\boost_1_66_0\\stage\\lib”文件夹。","link":"/2019/07/26/Win%E7%B3%BB%E7%BB%9F%E4%B8%AD%E4%BD%BF%E7%94%A8Mingw64%E7%BC%96%E8%AF%91Boost/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/07/13/hello-world/"},{"title":"pypi 镜像使用帮助","text":"pypi 镜像使用帮助pypi 镜像每 5 分钟同步一次。 临时使用1pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package 注意，simple 不能少, 是 https 而不是 http 设为默认升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置： 12pip install pip -Upip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 如果您到 pip 默认源的网络连接较差，临时使用本镜像站来升级 pip： 1pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U 如果是使用conda来安装， 执行这两条命令，可以将国内镜像源加入config文件 123conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --set show_channel_urls yes 1换回默认源：conda config --remove-key channels","link":"/2020/03/09/pypi%20%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8%E5%B8%AE%E5%8A%A9/"},{"title":"tranquilpeak主题添加版权信息","text":"版权是一个非常严肃的问题，现在的互联网上的抄袭现象很严重，还有一些爬虫自动爬取你的文章然后直接发布出去，所以我们需要在我们的文章里加入版权信息。 1、在tranquilpeak\\layout_partial\\post文件夹中创建copyright.ejs文件，内容如下： 12345678910&lt;div class=\"article-footer-copyright\"&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;href=\"&lt;%- url_for(' ') %&gt;\"&gt; &lt;%= post.title %&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=\"/\" title=\"访问 &lt;%= config.author %&gt;的个人博客\"&gt;&lt;%= config.author %&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&lt;%= post.date.format(\"YYYY年MM月DD日 - HH:mm\") %&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&lt;%= post.updated.format(\"YYYY年MM月DD日 - HH:mm\") %&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=\"&lt;%= url_for(post.path) %&gt;\" title=\"&lt;%= post.title %&gt;\"&gt;&lt;%= post.permalink %&gt;&lt;/a&gt; &lt;span class=\"copy-path\" title=\"点击复制文章链接\"&gt;&lt;i class=\"fa fa-clipboard\" data-clipboard-text=\"&lt;%= post.permalink %&gt;\" aria-label=\"复制成功！\"&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=\"fab fa-creative-commons\"&gt;&lt;/i&gt; &lt;a rel=\"license\" href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\" title=\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\"&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt; 2、在tranquilpeak\\layout_partial中的post.ejs中找到下面代码: 123456789101112&lt;div class=\"post-content markdown\"&gt; &lt;div class=\"main-content-wrap\"&gt; &lt;%- postContent %&gt; &lt;%- partial('post/gallery') %&gt; &lt;!-- 添加的部分 --&gt; &lt;!-- copyright --&gt; &lt;% if(post.copyright == true) { %&gt; &lt;%- partial('post/copyright') %&gt; &lt;% } %&gt; &lt;!-- copyright --&gt; &lt;/div&gt;&lt;/div&gt; 3、设置新建文章自动开启 copyright ，即新建文章自动显示自定义的版权声明，设置 ～/scaffolds/post.md 文件，如下 12345---title: {{ title }}date: {{ date }}copyright: true #新增,开启---","link":"/2019/07/15/tranquilpeak%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF/"},{"title":"tranquilpeak主题添加评论功能","text":"1、必要的准备在Github创建一个用来存放评论的仓库，当然你也可以直接用你博客所在的仓库。 注册一个Github OAuth application 注册成功后，记录下你的clientID和clientSecret。 2、安装插件 npm1npm i --save gitalk 3、修改主题下的配置：","link":"/2019/07/15/tranquilpeak%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"},{"title":"tranquilpeak主题添加阅读统计","text":"1、开启访问量统计功能主题配置下添加： 12busuanzi: enable: true 2、添加站点访客数在主题目录：\\tranquilpeak\\layout_partial\\footer.ejs下，添加如下代码： 123456789&lt;span&gt; &lt;% if (theme.busuanzi &amp;&amp; theme.busuanzi.enable){ %&gt; &lt;!-- 不蒜子统计 --&gt; &lt;span id=\"busuanzi_container_site_pv\"&gt; 您好！您是本站的第&lt;span id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt;位访客！ &lt;/span&gt; &lt;script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"&gt;&lt;/script&gt; &lt;% } %&gt;&lt;/span&gt; 3、添加阅读量统计在主题目录：\\tranquilpeak\\layout_partial\\post\\meta.ejs下，添加如下代码： 123&lt;span id=\"busuanzi_container_page_pv\"&gt; 阅读量:&lt;span id=\"busuanzi_value_page_pv\"&gt;&lt;/span&gt;&lt;/span&gt; 4、添加字数统计1npm i --save hexo-wordcount 在合适的位置添加：某一篇文章的字数统计： 1&lt;span class=\"post-count\"&gt;&lt;%= wordcount(post.content) %&gt;&lt;/span&gt; 推荐阅读时间： 1&lt;span class=\"post-count\"&gt;&lt;%= min2read(post.content) %&gt;&lt;/span&gt; 总字数统计： 1&lt;span class=\"post-count\"&gt;&lt;%= totalcount(site) %&gt;&lt;/span&gt;","link":"/2019/07/16/tranquilpeak%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E7%BB%9F%E8%AE%A1/"},{"title":"ubuntu vmware15下安装win10报VT-X未开启的解决方法","text":"ubuntu vmware error,This host supports Intel VT-x, but Intel VT-x is disabled 123456789101112131415This host supports Intel VT-x, but Intel VT-x is disabled.Intel VT-x might be disabled if it has been disabled in the BIOS/firmwaresettings or the host has not been power-cycled since changing this setting.(1) Verify that the BIOS/firmware settings enable Intel VT-x and disable 'trusted execution.'(2) Power-cycle the host if either of these BIOS/firmware settings have been changed.(3) Power-cycle the host if you have not done so since installing VMware Workstation.(4) Update the host's BIOS/firmware to the latest version.For more detailed information, seehttp://vmware.com/info?id=152。 12345678虚拟机已经被配置为64位客户操作系统。然而，64位操作不可用。此主机支持英特尔虚拟化技术（VT-x），但是英特尔虚拟化技术被禁用了。如果在BIOS固件设置中，禁用了VT-x，或者改变了这个设置但还没重启主机，它都是无效的。（1） 检查BIOS/固件设置，启用VT和禁用 'trusted execution.'（2） 如果更改了这些BIOS/固件设置，重启主机。（3） 安装VMware Workstation，重启主机.（4） 更新BIOS/固件到最新版本。更多详细信息，请参阅 http://vmware.com/info?id=152 。 解决办法：重启开机按F2进入启动菜单界面，选择按F10进入BIOS界面，使用箭头键，滚动到系统设置（configuration）选项，然后方向键滚动到 处理器虚拟化技术（Intel Virtualization Technology）选项，按enter键，选择启用（Enabled），最后按F10键以保存并退出即可开启VT功能。重新启动计算机。","link":"/2020/04/21/ubuntu%20vmware15%E4%B8%8B%E5%AE%89%E8%A3%85win10%E6%8A%A5VT-X%E6%9C%AA%E5%BC%80%E5%90%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"title":"ubantu16修改侧边栏的位置","text":"1.修改命令 #在终端输入 1gsettings set com.canonical.Unity.Launcher launcher-position Bottom 2.如果遇错 1GLib-GIO-Message: Using the ‘memory‘ GSettings backend. Your settings will not be saved or shared with other applications. 3.输入命令，再执行上一步 1export GIO_EXTRA_MODULES=/usr/lib/x86_64-linux-gnu/gio/modules/ 4 永久解决： 1sudo gedit ~/.bashrc 然后把粘贴在最后一行 1export GIO_EXTRA_MODULES=/usr/lib/x86_64-linux-gnu/gio/modules/","link":"/2019/11/30/ubuntu16%E4%BF%AE%E6%94%B9%E4%BE%A7%E8%BE%B9%E6%A0%8F%E7%9A%84%E4%BD%8D%E7%BD%AE/"},{"title":"ubuntu下安装hexo","text":"为什么不使用命令行直接安装 1sudo apt-get install nodejs nodejs-legacy npm 安装的node和npm的版本太低，更新也不是新版本。 一、Ubuntu 下安装GitGit已经收录在Ubuntu软件仓库中，所以安装很简单，用以下方法即可： 12sudo apt-get updatesudo apt-get install git 安装完成后，可以用git –version来验证安装是否完成. 初次设置Git在Ubuntu下安装Git之后建议做一些基础设置，例如设置一下你的用户名与电子邮件等，这些信息在提交代码的时候都是必需的。可以使用以下的命令： 12git config --global user.name \"youname\"git config --global user.email \"youremail\" 之后，就可以用git config –list来查看设置的信息。 二、安装nodejs选择合适版本，直接解压即可。解压文件夹下的bin目录地址设置为环境变量 123vim ~/.bashrc在文件的最后一行添加一行:export PATH=$PATH:解压文件夹的bin目录路径,例如export PATH=$PATH:/home/simple/node/bin 设置后查看版本号 1node -v &amp;&amp; npm -v 三、安装hexo1npm install -g hexo-cli 这里一直提示找不到hexo，问题是没有设置环境变量，解决办法，是和Windows最大的不同添加的环境变量，注意目录: 123#set for hexo-environmentexport HEXO_HOME=/home/zh/Program/node/lib/node_modules/hexo-cliexport PATH=$HEXO_HOME/bin:$PATH 最后查看版本，成功解决问题，其他的和Windows下是一样的。","link":"/2019/07/30/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85hexo/"},{"title":"ubuntu连接与传输远程服务器的可视化工具","text":"1 Gftp - Linux / Ubuntu 之间文件传输图形界面工具 Linux / Ubuntu 之间文件传输图形界面工具 2 远程服务器传输文件在本机安装FileZilla客户端： apt-get install filezilla启动：filezilla即可使用，注意要是非root用户，需要加sudo","link":"/2019/11/30/ubuntu%E8%BF%9E%E6%8E%A5%E4%B8%8E%E4%BC%A0%E8%BE%93%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7/"},{"title":"代码加密方法","text":"思路是先将py转换为c代码，然后编译c为so文件。 1 文件夹下有hello.py文件待编译，内容如下 12345#-* -coding: UTF-8 -* -#__author__ = 'Arvin'def say(self): print('hello') 2 使用Cython将python文件打包成.so文件,新建一个setup.py。setup文件的代码很简单： 1234from distutils.core import setupfrom Cython.Build import cythonize setup(ext_modules=cythonize(\"hello.py\")) 执行setup文件，python setup.py build_ext –inplace. build_est大概就是编译extension文件的意思inplace则是将.so文件放到源代码pyx旁边，也就是同一目录下的意思 3 写完hello.py的cython代码之后，不需要编译，当我们需要使用的时候，在文件前面加上 123import pyximportpyximport.install()from hello import say","link":"/2019/11/30/%E4%BB%A3%E7%A0%81%E5%8A%A0%E5%AF%86%E6%96%B9%E6%B3%95/"},{"title":"使用sphinx快速为python注释生成API文档","text":"sphinx简介sphinx是一种基于Python的文档工具，它可以令人轻松的撰写出清晰且优美的文档，由Georg Brandl在BSD许可证下开发。新版的Python3文档就是由sphinx生成的，并且它已成为Python项目首选的文档工具，同时它对C/C++项目也有很好的支持。 使用pip进行安装：1pip install sphinx 初始化进入所要生成API文档的目录,输入: 1sphinx-quickstart 基本一路默认向下,设置项目名称与作者，项目名称之后会作为标题显示在文档首页使用sphinx快速为你python注释生成API文档Sphinx将python代码注释生成文档2篇文章的设置略有不同，似乎对结果没有什么影响。 配置修改进入此文件夹找到conf.py文件，打开编辑,将下面几行代码（第15-17行）取消注释： 123import osimport syssys.path.insert(0, os.path.abspath('.')) 修改源码存放的目录，这一步一定要改 1sys.path.insert(0, os.path.abspath('../src')) 生成 rst源码目录：src，API目录：API，在同一目录下。在API目录下执行以下命令,会生成对应 python 文件名的 rst 文件 1sphinx-apidoc -o ./ ../src 生成 html执行make指令，生成html文档页 打开_build/html/index.html‘bizstyle’主题 配置主题打开API/conf.py文件，找到html_theme = ‘alabaster’修改即可。sphinx官方主题 生成pdf生成PDF 的方法有很多，主要的我见过两种一种是rst2pdf, 一种是 LaTeX builder, 后者可能会更好这里有个效果对比 可以使用rst2pdf生成PDF 1pip install rst2pdf 在conf.py里添加如下 12extensions = ['rst2pdf.pdfbuilder']df_documents = [(u'index', u'pdf file name', u'pdf title', u'author name'),] 最后命令行运行 1sphinx-build -b pdf API build/pdf 在ubuntu 上安装 LaTex 参考 12sudo apt-get install texlive-fullsudo apt-get install texmaker 下面的命令就可以产生pdf 文件 1make latexpdf","link":"/2019/07/19/%E4%BD%BF%E7%94%A8sphinx%E5%BF%AB%E9%80%9F%E4%B8%BApython%E6%B3%A8%E9%87%8A%E7%94%9F%E6%88%90API%E6%96%87%E6%A1%A3/"},{"title":"测试内存","text":"程序使用了多少内存？现在我们对计时有了较好的理解，那么让我们继续弄清楚程序使用了多少内存。我们很幸运，Fabian Pedregosa模仿Robert Kern的line_profiler实现了一个不错的内存分析器。 首先使用pip安装: 12$ pip install -U memory_profiler$ pip install psutil （这里建议安装psutil包，因为它可以大大改善memory_profiler的性能）。 就像line_profiler，memory_profiler也需要在感兴趣的函数上面装饰@profile装饰器： 1234@profiledef primes(n): ... ... 想要观察你的函数使用了多少内存，像下面这样执行: 1$ python -m memory_profiler primes.py 一旦程序退出，你将会看到看起来像这样的输出： 12345678910111213141516171819202122232425Filename: primes.pyLine # Mem usage Increment Line Contents============================================== 2 @profile 3 7.9219 MB 0.0000 MB def primes(n): 4 7.9219 MB 0.0000 MB if n==2: 5 return [2] 6 7.9219 MB 0.0000 MB elif n&lt;2: 7 return [] 8 7.9219 MB 0.0000 MB s=range(3,n+1,2) 9 7.9258 MB 0.0039 MB mroot = n ** 0.5 10 7.9258 MB 0.0000 MB half=(n+1)/2-1 11 7.9258 MB 0.0000 MB i=0 12 7.9258 MB 0.0000 MB m=3 13 7.9297 MB 0.0039 MB while m &lt;= mroot: 14 7.9297 MB 0.0000 MB if s[i]: 15 7.9297 MB 0.0000 MB j=(m*m-3)/2 16 7.9258 MB -0.0039 MB s[j]=0 17 7.9297 MB 0.0039 MB while j&lt;half: 18 7.9297 MB 0.0000 MB s[j]=0 19 7.9297 MB 0.0000 MB j+=m 20 7.9297 MB 0.0000 MB i=i+1 21 7.9297 MB 0.0000 MB m=2*i+3 22 7.9297 MB 0.0000 MB return [2]+[x for x in s if x] 首先安装memory_profiler和psutil（psutil主要用于提高memory_profile的性能，建议安装）（可使用pip直接安装） 12pip install memory_profiler pip install psutil 具体运行方式为如下：（在待检测代码所在目录中打开命令行运行如下代码） 1mprof run test.py 结果会生成一个.dat文件，如”mprofile_20160716170529.dat”，里面记录了内存随时间的变化 1mprof plot 使用该命令以图片的形式展示出来 如果在运行的时候出现如下的gbk解码错误，解决方案是首先进入 memory_profiler.py文件中，找到第1131行， 把with open(filename) as f: 更改成 with open(filename, encoding=’utf-8’) as f：！！！","link":"/2020/04/20/%E6%B5%8B%E8%AF%95%E5%86%85%E5%AD%98/"},{"title":"踩坑记","text":"报错信息： 1、npm WARN deprecated core-js@1.2.7: core-js@&lt;2.6.8 is no longer maintained. Please, upgrade to core-js@3 or at least to actual version of core-js@2.解决： 1npm install -g core-js@3 2、babel-eslint@10.0.1 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.解决： 1npm install eslint@4.x babel-eslint@8 --save-dev 3、npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.9: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”win32”,”arch”:”x64”})解决： 1fsevent是mac osx系统的，你是在win或者Linux下使用了 所以会有警告，忽略即可 4、npm WARN deprecated circular-json@0.3.3: CircularJSON is in maintenance only, flatted is its successor.解决： 12npm cache clean --forcenpm install --registry=https://registry.npm.taobao.org 5、Ubuntu安装npm报错解决方案(node-gyp (&gt;= 0.10.9)[https://blog.csdn.net/Chad97/article/details/96019818] 1234node-gyp : 依赖: nodejs-dev 但是它将不会被安装 依赖: gyp (&gt;= 0.1+20150913git1f374df9) 但是它将不会被安装 推荐: build-essential 但是它将不会被安装E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系 使用下面命令安装 1sudo aptitude install npm 遇到如下 1234567Keep the following packages at their current version:1) libssl-dev [Not Installed] 2) node-gyp [Not Installed] 3) nodejs-dev [Not Installed] 4) npm [Not Installed] Accept this solution? [Y/n/q/?] ?先N再Y 6、 123path.js:1142 cwd = process.cwError: ENOENT: no such file or directory, uv_cwd 重启终端","link":"/2019/07/15/%E8%B8%A9%E5%9D%91%E8%AE%B0/"},{"title":"睡眠分期","text":"睡眠分期 睡眠是一动态过程，非快速眼动期（NREM）期与快速眼动期（REM）期交替出现。NREM期睡眠时间约占75％－80％，REM期睡眠时间约占20％－25％。 一、美国睡眠医学学会（AASM）脑电睡眠分期AASM睡眠主要分为以下5期睡眠主要分为以下5期（成年人）：W期——清醒期（Wakefulness)N1期睡眠——非快速眼动1期（NREM1)N2期睡眠——非快速眼动2期（NREM2）N3期睡眠——非快速眼动3期（NREM3）R期睡眠——快速眼动期（REM)其中，儿童睡眠分为6期，在以上成人5期的基础上，还有：N期睡眠——非快速眼动期（NREM) 二、各期脑电波形详解α节律波：W期闭眼状态α波:频率8—13Hz,主要见于安静清醒闭眼状态下和REM 期，N1期占&lt;50%。睁眼时消失，REM期较清醒期频率慢1—2Hz无振幅和形态标准，往往表现渐增渐减状。老年人 频率和振幅降低。亦见于嗜睡状态，某些重症OSAHS或重症左心功能不全患者可能整夜PSG大部分时间表现为低频α波。主要在枕区。β波：W期睁眼状态β波：主要见于清醒期睁眼状态，频率&gt;13Hz的低电位波，无振幅和形态标准。有时也出现在N2 睡眠期，服用安眠药后出现较多。顶尖波：N1期外形尖锐，与背景明显区别，主要见于N1睡眠期后期，常与θ波毗邻。无振幅和形态标准，时间一般&lt;0.5秒，中央部。θ波：N1期后期主要见于N1期后期，频率4—7Hz，一般无振幅及形态标准，但波幅通常&gt;50uV，有时（尤其在幼儿及青少年）为短阵高电压波，需与癫痫波鉴别，有学者称为良性癫痫样睡眠移行波（BETS）。中央部位明显。纺锤波（梭形波）：N2期外形规则，频率为11—16Hz（最常见12—14Hz）成串出现的明显可辨的波形，持续时间≥ 0.5秒，波幅&lt;50uV,主要在N2,N3睡眠期，为N2期的特征性脑电波，通常以中央区导联记录的波幅最大。服用安定类药物患者纺锤波出现明显增多。K复合波：N2期K复合波：N2期特征性脑电波，无频率标准，从背景脱颖而出。为一个清晰可辨的陡峭负向负向波（向上）之后紧接着一个正向波（向下），凸显在背景EEG中，持续时间≥0.5秒。K复合波通常在额部脑电导联记录最明显，N2、N3期出现。还可作为睡眠期间脑对外界（声音）或内部刺激（呼吸暂停）的反应出现K复合波结束后1秒内出现α波，此时称为觉醒相关K复合波。与K复合波相关的觉醒，其发生的始点与K复合波截止点间不能大于1s。低频δ慢波：N3期或N4期δ波（慢波睡眠）：低频率（范围0.5—2Hz），高波幅（≥75uV），在整个额区可监测到。N2期睡眠&lt;20%，N3期睡眠δ波占20％－50％，4期δ波占50％以上。锯齿波：REM期锯齿波：序列陡峭波浪或三角状波形，类似锯齿状，频率为2—6Hz，阵发出现，本质上为θ波，&lt;50uV，最大波幅见于颅中央区，常出现在阵发性快速眼动波之前。 低电压混合频率波：不高于10μV的节律性波以及不高于20μV的单个波。 三、AASM睡眠各期判读标准睡眠分期基本原则基本规则包括：&ensp;&ensp;&ensp;&ensp;1.应用逐屏分期方法，每30秒为一屏，整个睡眠时段（由关灯至开灯）相继顺序的每屏评分。在整个分析过程中保持相同屏距。&ensp;&ensp;&ensp;&ensp;2.不允许将相邻两屏的部分结合组成一个新屏。&ensp;&ensp;&ensp;&ensp;3.如一屏中出现2个或多个睡眠期并存于同一记录帧，哪期所占的比例最大判定为哪一期。&ensp;&ensp;&ensp;&ensp;4.如一屏中无出现任何睡眠特征，要根据前一/数屏及后一/数屏的睡眠情况判读。 W期（清醒状态）判读标准一、定义清醒状态下，有两种主要脑电图表现：&ensp;&ensp;&ensp;&ensp;1.低电压（10—30uV）混合波，频率16—25Hz。&ensp;&ensp;&ensp;&ensp;2.α波，频率8—13Hz，电压20—40uV。患者处于松弛状态、闭眼时α波最多见。眼球运动次数多少不定；肌电活动根据不同松弛状态而幅度不一。&ensp;&ensp;&ensp;&ensp;α节律：连串正弦形8—13Hz脑电波，于闭眼时在枕部录取，睁眼时减弱。二、规则&ensp;&ensp;&ensp;&ensp;1、当枕部脑电波为α节律且占屏&gt;50%时，判读为W期。&ensp;&ensp;&ensp;&ensp;2、如无清析可见的α节律，任何以下情况出现可判读为W期：1）眨眼时共轭垂直眼动波：清醒期睁眼或闭眼时导致的频率为0.5—2Hz的眨眼动作的共轭垂直眼动波。2）阅读眼球运动：阅读时出现，由周期性慢相眼动和随后反向快相眼动组成的序列共轭眼动波。3）快速眼动：不规则的共轭快速眼球运动（不规律，呈尖峰状，眼动波初始达峰时间&lt;0.5秒），伴有正常或偏高肌电张力。快速眼动是R期的睡眠特征，但也可见于清醒状态睁眼扫视周围环境时。 N1期睡眠判读标准判一、定义睡眠起始：指第一帧判读为非W期的任何睡眠期第一帧的起始。N1期睡眠是由W期过渡其它睡眠的阶段，或睡眠期间出现体动后的过渡阶段。初期可出现慢速眼球运动，后期可出现不规则的高波幅皮质锐波（顶尖波，电压50—75uV）。肌电活动幅度不一，通常较W期时低。二、规则&ensp;&ensp;&ensp;&ensp;1、如有α节律者，当α波逐渐减弱，所占比例降至整屏的50%以下，并被低波幅、混合频率波活动取代时，即判读为N1期。&ensp;&ensp;&ensp;&ensp;2、如无清晰可见的α波时，出现以下任何现象即可判读为N1期：1）低波幅混合频率活动：脑电波在4—7Hz范围，较W期脑电背景频率减慢≥1Hz的脑电波。2）顶尖波(V波)：波形尖锐陡峭的高波幅负向脑波，持续时间&lt;0.5秒，在中央区最大最明显。3）缓慢眼球运动：共轭，相对规律，呈正旋波，初始达峰时间&gt;0.5秒。 N2期睡眠判读标准判一、定义 N2期特征是出现睡眠纺锤波（睡眠梭形波）和/或非觉醒相关的K复合波。二、规则&ensp;&ensp;&ensp;&ensp;1、当在一屏前半段或在前一屏后半段出现≥1个纺锤波或≥1个非觉醒相关的K复合波，该屏便应判为N2期。（非觉醒相关K复合波：K复合波出现后1秒内并无觉醒出现）&ensp;&ensp;&ensp;&ensp; 2、纺锤波或非觉醒相关K复合波出现后一段低波幅、混合频率脑电波，应判为N2期。&ensp;&ensp;&ensp;&ensp;3、通常无眼球运动，但慢速眼球运动亦可持续出现。&ensp;&ensp;&ensp;&ensp;4、肌电活动幅度不一，通常较W期时低。N2期睡眠完结&ensp;&ensp;&ensp;&ensp;1.转为W期、N3期或R期。&ensp;&ensp;&ensp;&ensp;2.出现觉醒后应判读为N1期，直至纺锤波或非觉醒相关K复合波再出现。&ensp;&ensp;&ensp;&ensp;3.一次大体动后紧接着出现随缓慢眼球运动和低波幅混合频率EEG脑电波，无睡眠纺锤波或非觉醒相关K复合波出现（大体动之后记录帧应该判为N1期；如果没有缓慢眼球运动应判读为N2期）。 N3期睡眠判读标准判一、定义 N3期特征是出现N3期睡眠 δ波（慢波睡眠）。二、规则&ensp;&ensp;&ensp;&ensp;1、在额部导联量度的高波幅（&gt;75uV）、低频率δ波（0.5—2Hz）占一屏≥20%，应判为N3期，不用考虑年龄因素。&ensp;&ensp;&ensp;&ensp;2、纺锤波可持续出现。&ensp;&ensp;&ensp;&ensp;3、无眼球运动。&ensp;&ensp;&ensp;&ensp;4、肌电活动幅度不一，通常较W期时低。 R期睡眠（快速眼动期睡眠）判定标准一、定义 低波幅、混合频率脑电波，表现为低电压的θ波（3—7Hz）及低频α波（较W期时的α波慢1—2Hz），间有典型锯齿波出现。可见快速眼球运动，肌电活动幅度较NR睡眠期显著减弱至近乎平坦（整夜最低）。二、规则当以下现象同时出现时即可判为R期睡眠：&ensp;&ensp;&ensp;&ensp;1.低波幅、混合频率脑电波&ensp;&ensp;&ensp;&ensp;2.低肌电活动幅度&ensp;&ensp;&ensp;&ensp;3.可见快速眼球运动R期睡眠持续判读规则： 一屏或多屏R期睡眠后，其后连续数帧无快速眼球运动，此时如果脑电波持续显示为低波幅、混合频率活动，无觉醒相关K复合波或纺锤波出现，并且持续低肌电张力活动幅度，即使没有出现快速眼球运动，仍应继续判读为R期。R期睡眠的完结：&ensp;&ensp;&ensp;&ensp;1.过渡至W期或N3期&ensp;&ensp;&ensp;&ensp;2.肌电活动幅度增大，符号N1期准则。&ensp;&ensp;&ensp;&ensp;3.出现觉醒后脑电为低波幅、混合频率及出现慢速眼球运动（判为N1期）。（如没有出现慢速眼球运动、肌电活动幅度维持低水平，应继续判为R期）&ensp;&ensp;&ensp;&ensp;4.在大型身体运动后紧接出现慢速眼球运动及低波幅、混合频率脑电，没有纺锤波或觉醒相关K复合波，应判为N1期。如果没有出现慢速眼球运动、肌电活动幅度维持低水平，应继续判为R期）&ensp;&ensp;&ensp;&ensp;5.一个或更多纺锤波或非觉醒相关K复合波在一屏的前半段出现，即使肌电活动幅度维持低水平，该屏都应判为N2期。 N2期/R期睡眠的混合1.在明确N2期与明确R期之间的睡眠时段，肌电活动波幅于一屏前半段显著降低至近乎平坦。即使没有快速眼球运动，以下现象同时出现时该屏应判为R期： a.没有纺锤波 b.没有非觉醒相关K复合波2.在明确N2期与明确R期之间的睡眠是时段，肌电活动波幅于一屏前半段显著降低至近乎平坦。以下现象同时出现时该屏应判为N2期： a.纺锤波或非觉醒相关K复合波出现 b.没有快速眼球运动3.在明确N2期（肌电活动波幅近乎平坦）与明确R期（肌电活动波幅再无下降）之间的睡眠时段，即使没有快速眼球运动，以下现象同时出现时该屏应判为R期： a.没有纺锤波 b.没有非觉醒相关K复合波 大型身体运动 超过半屏的脑电记录被运动及肌电伪迹干扰至模糊不清而无法辨认睡眠期。判读标准：&ensp;&ensp;&ensp;&ensp;1.如α节律在该屏中出现（即使&lt;15秒），判读为W期。&ensp;&ensp;&ensp;&ensp;2.如无α节律节律出现，但前屏或后屏被判读为W期，则该屏亦判为W期。&ensp;&ensp;&ensp;&ensp;3.其它情况下,此帧睡眠分期判读与随后一屏的判读相同。","link":"/2019/07/29/%E7%9D%A1%E7%9C%A0%E5%88%86%E6%9C%9F/"}],"tags":[{"name":"软件中心","slug":"软件中心","link":"/tags/%E8%BD%AF%E4%BB%B6%E4%B8%AD%E5%BF%83/"},{"name":"CSP","slug":"CSP","link":"/tags/CSP/"},{"name":"脑机接口","slug":"脑机接口","link":"/tags/%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"mingw","slug":"mingw","link":"/tags/mingw/"},{"name":"boost","slug":"boost","link":"/tags/boost/"},{"name":"pip","slug":"pip","link":"/tags/pip/"},{"name":"ubuntu","slug":"ubuntu","link":"/tags/ubuntu/"},{"name":"tranquilpeak","slug":"tranquilpeak","link":"/tags/tranquilpeak/"},{"name":"gitalk","slug":"gitalk","link":"/tags/gitalk/"},{"name":"busuanzi","slug":"busuanzi","link":"/tags/busuanzi/"},{"name":"wordcount","slug":"wordcount","link":"/tags/wordcount/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"},{"name":"加密代码","slug":"加密代码","link":"/tags/%E5%8A%A0%E5%AF%86%E4%BB%A3%E7%A0%81/"},{"name":"sphinx","slug":"sphinx","link":"/tags/sphinx/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"EEG","slug":"EEG","link":"/tags/EEG/"},{"name":"睡眠分期","slug":"睡眠分期","link":"/tags/%E7%9D%A1%E7%9C%A0%E5%88%86%E6%9C%9F/"},{"name":"vmware","slug":"vmware","link":"/tags/vmware/"},{"name":"内存","slug":"内存","link":"/tags/%E5%86%85%E5%AD%98/"}],"categories":[{"name":"解决错误","slug":"解决错误","link":"/categories/%E8%A7%A3%E5%86%B3%E9%94%99%E8%AF%AF/"},{"name":"算法大全","slug":"算法大全","link":"/categories/%E7%AE%97%E6%B3%95%E5%A4%A7%E5%85%A8/"},{"name":"技术工具","slug":"技术工具","link":"/categories/%E6%8A%80%E6%9C%AF%E5%B7%A5%E5%85%B7/"},{"name":"Hello World","slug":"Hello-World","link":"/categories/Hello-World/"},{"name":"博客相关","slug":"博客相关","link":"/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"}]}